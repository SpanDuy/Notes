{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Web\\\\notes.frontend\\\\src\\\\notes\\\\testing.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Client } from '../api/api';\nimport imageSrc from '../../src/pictures/DropList.png';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState('');\n  let textInput = useRef(null);\n  const [notes, setNotes] = useState(undefined);\n  const [note, setNote] = useState();\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleChange = event => {\n    setSelectedValue(event.target.value);\n  };\n  const apiClient = new Client('https://localhost:44397');\n  async function createNote(note) {\n    await apiClient.create('1.0', note);\n    console.log('Note is created.');\n  }\n  async function getNotes() {\n    const noteListVm = await apiClient.getAll('1.0');\n    setNotes(noteListVm.notes);\n  }\n  async function getNote(note) {\n    if (note.id !== undefined) {\n      const NoteDetailsVm = await apiClient.get(note.id, '1.0');\n      setNote(NoteDetailsVm);\n    }\n  }\n  useEffect(() => {\n    setTimeout(getNotes, 500);\n  }, []);\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      const note = {\n        title: event.currentTarget.value,\n        details: \"\"\n      };\n      createNote(note);\n      event.currentTarget.value = '';\n      setTimeout(getNotes, 500);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drop-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      alt: \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430\",\n      className: \"drop-list-img\",\n      onClick: handleToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: notes === null || notes === void 0 ? void 0 : notes.map(note => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getNote(note),\n        children: note.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 2\n  }, this);\n};\n_s(Dropdown, \"kW3kURa8+k7KwhXy8CBVBmf2d4s=\");\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Client","imageSrc","jsxDEV","_jsxDEV","Dropdown","_s","isOpen","setIsOpen","selectedValue","setSelectedValue","textInput","notes","setNotes","undefined","note","setNote","handleToggle","handleChange","event","target","value","apiClient","createNote","create","console","log","getNotes","noteListVm","getAll","getNote","id","NoteDetailsVm","get","setTimeout","handleKeyPress","key","title","currentTarget","details","className","children","src","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/user/Web/notes.frontend/src/notes/testing.tsx"],"sourcesContent":["import React, { FC, ReactElement, useRef, useEffect, useState, ChangeEvent } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport { CreateNoteDto, Client, NoteLookupDto, NoteDetailsVm } from '../api/api';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport { create } from 'domain';\r\nimport imageSrc from '../../src/pictures/DropList.png'\r\nimport '../App.css';\r\n\r\nconst Dropdown = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState('');\r\n\tlet textInput = useRef(null);\r\n\tconst [notes, setNotes] = useState<NoteLookupDto[] | undefined>(undefined);\r\n\tconst [note, setNote] = useState<NoteDetailsVm>();\r\n\r\n  const handleToggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedValue(event.target.value);\r\n  };\r\n\r\nconst apiClient = new Client('https://localhost:44397');\r\n\r\nasync function createNote(note: CreateNoteDto) {\r\n    await apiClient.create('1.0', note);\r\n    console.log('Note is created.');\r\n}\r\n\r\n    async function getNotes() {\r\n        const noteListVm = await apiClient.getAll('1.0');\r\n        setNotes(noteListVm.notes);\r\n    }\r\n\r\n\t\tasync function getNote(note: NoteLookupDto) {\r\n\t\t\tif (note.id !== undefined) {\r\n\t\t\t\tconst NoteDetailsVm = await apiClient.get(note.id,'1.0');\r\n\t\t\t\tsetNote(NoteDetailsVm);\r\n\t\t\t}\r\n\t}\r\n\r\n    useEffect(() => {\r\n        setTimeout(getNotes, 500);\r\n    }, []);\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            const note: CreateNoteDto = {\r\n                title: event.currentTarget.value,\r\n                details: \"\"\r\n            };\r\n            createNote(note);\r\n            event.currentTarget.value = '';\r\n            setTimeout(getNotes, 500);\r\n        }\r\n    };\r\n\r\nreturn (\r\n\t<div className=\"drop-list\">\r\n\t\t<img src={imageSrc} alt=\"Картинка\" className=\"drop-list-img\" onClick={handleToggle} />\r\n\t\t{isOpen && (\r\n\t\t\t<div>\r\n\t\t\t\t{notes?.map(note => (\r\n\t\t\t\t\t<button onClick={() => getNote(note)}>{note.title}</button>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t)}\r\n\t</div>\r\n);\r\n};\r\n\r\nexport default Dropdown;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}