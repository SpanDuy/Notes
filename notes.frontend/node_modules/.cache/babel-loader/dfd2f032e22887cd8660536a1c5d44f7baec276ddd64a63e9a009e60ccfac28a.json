{"ast":null,"code":"import { ClientBase } from './client-base';\n\n/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nexport class Client extends ClientBase {\n  constructor(baseUrl, http) {\n    super();\n    this.http = void 0;\n    this.baseUrl = void 0;\n    this.jsonParseReviver = undefined;\n    this.http = http ? http : window;\n    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';\n  }\n\n  /**\r\n   * @return Success\r\n   */\n  getAll(version) {\n    let url_ = this.baseUrl + '/api/{version}/Note';\n    if (version === undefined || version === null) throw new Error(\"The parameter 'version' must be defined.\");\n    url_ = url_.replace('{version}', encodeURIComponent('' + version));\n    url_ = url_.replace(/[?&]$/, '');\n    let options_ = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    };\n    return this.transformOptions(options_).then(transformedOptions_ => {\n      return this.http.fetch(url_, transformedOptions_);\n    }).then(_response => {\n      return this.processGetAll(_response);\n    });\n  }\n  processGetAll(response) {\n    const status = response.status;\n    let _headers = {};\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v, k) => _headers[k] = v);\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200 = null;\n        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return result200;\n      });\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401 = null;\n        result401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return throwException('Unauthorized', status, _responseText, _headers, result401);\n      });\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers);\n      });\n    }\n    return Promise.resolve(null);\n  }\n\n  /**\r\n   * @param body (optional)\r\n   * @return Success\r\n   */\n  create(version, body) {\n    let url_ = this.baseUrl + '/api/{version}/Note';\n    if (version === undefined || version === null) throw new Error(\"The parameter 'version' must be defined.\");\n    url_ = url_.replace('{version}', encodeURIComponent('' + version));\n    url_ = url_.replace(/[?&]$/, '');\n    const content_ = JSON.stringify(body);\n    let options_ = {\n      body: content_,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    };\n    return this.transformOptions(options_).then(transformedOptions_ => {\n      return this.http.fetch(url_, transformedOptions_);\n    }).then(_response => {\n      return this.processCreate(_response);\n    });\n  }\n  processCreate(response) {\n    const status = response.status;\n    let _headers = {};\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v, k) => _headers[k] = v);\n    }\n    if (status === 201) {\n      return response.text().then(_responseText => {\n        let result201 = null;\n        result201 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return result201;\n      });\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401 = null;\n        result401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return throwException('Unauthorized', status, _responseText, _headers, result401);\n      });\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers);\n      });\n    }\n    return Promise.resolve(null);\n  }\n\n  /**\r\n   * @param body (optional)\r\n   * @return Success\r\n   */\n  update(version, body) {\n    let url_ = this.baseUrl + '/api/{version}/Note';\n    if (version === undefined || version === null) throw new Error(\"The parameter 'version' must be defined.\");\n    url_ = url_.replace('{version}', encodeURIComponent('' + version));\n    url_ = url_.replace(/[?&]$/, '');\n    const content_ = JSON.stringify(body);\n    let options_ = {\n      body: content_,\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return this.transformOptions(options_).then(transformedOptions_ => {\n      return this.http.fetch(url_, transformedOptions_);\n    }).then(_response => {\n      return this.processUpdate(_response);\n    });\n  }\n  processUpdate(response) {\n    const status = response.status;\n    let _headers = {};\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v, k) => _headers[k] = v);\n    }\n    if (status === 204) {\n      return response.text().then(_responseText => {\n        return;\n      });\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401 = null;\n        result401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return throwException('Unauthorized', status, _responseText, _headers, result401);\n      });\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers);\n      });\n    }\n    return Promise.resolve(null);\n  }\n\n  /**\r\n   * @return Success\r\n   */\n  get(id, version) {\n    let url_ = this.baseUrl + '/api/{version}/Note/{id}';\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\");\n    url_ = url_.replace('{id}', encodeURIComponent('' + id));\n    if (version === undefined || version === null) throw new Error(\"The parameter 'version' must be defined.\");\n    url_ = url_.replace('{version}', encodeURIComponent('' + version));\n    url_ = url_.replace(/[?&]$/, '');\n    let options_ = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    };\n    return this.transformOptions(options_).then(transformedOptions_ => {\n      return this.http.fetch(url_, transformedOptions_);\n    }).then(_response => {\n      return this.processGet(_response);\n    });\n  }\n  processGet(response) {\n    const status = response.status;\n    let _headers = {};\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v, k) => _headers[k] = v);\n    }\n    if (status === 200) {\n      return response.text().then(_responseText => {\n        let result200 = null;\n        result200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return result200;\n      });\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401 = null;\n        result401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return throwException('Unauthorized', status, _responseText, _headers, result401);\n      });\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers);\n      });\n    }\n    return Promise.resolve(null);\n  }\n\n  /**\r\n   * @return Success\r\n   */\n  delete(id, version) {\n    let url_ = this.baseUrl + '/api/{version}/Note/{id}';\n    if (id === undefined || id === null) throw new Error(\"The parameter 'id' must be defined.\");\n    url_ = url_.replace('{id}', encodeURIComponent('' + id));\n    if (version === undefined || version === null) throw new Error(\"The parameter 'version' must be defined.\");\n    url_ = url_.replace('{version}', encodeURIComponent('' + version));\n    url_ = url_.replace(/[?&]$/, '');\n    let options_ = {\n      method: 'DELETE',\n      headers: {}\n    };\n    return this.transformOptions(options_).then(transformedOptions_ => {\n      return this.http.fetch(url_, transformedOptions_);\n    }).then(_response => {\n      return this.processDelete(_response);\n    });\n  }\n  processDelete(response) {\n    const status = response.status;\n    let _headers = {};\n    if (response.headers && response.headers.forEach) {\n      response.headers.forEach((v, k) => _headers[k] = v);\n    }\n    if (status === 204) {\n      return response.text().then(_responseText => {\n        return;\n      });\n    } else if (status === 401) {\n      return response.text().then(_responseText => {\n        let result401 = null;\n        result401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        return throwException('Unauthorized', status, _responseText, _headers, result401);\n      });\n    } else if (status !== 200 && status !== 204) {\n      return response.text().then(_responseText => {\n        return throwException('An unexpected server error occurred.', status, _responseText, _headers);\n      });\n    }\n    return Promise.resolve(null);\n  }\n}\nexport class ApiException extends Error {\n  constructor(message, status, response, headers, result) {\n    super();\n    this.message = void 0;\n    this.status = void 0;\n    this.response = void 0;\n    this.headers = void 0;\n    this.result = void 0;\n    this.isApiException = true;\n    this.message = message;\n    this.status = status;\n    this.response = response;\n    this.headers = headers;\n    this.result = result;\n  }\n  static isApiException(obj) {\n    return obj.isApiException === true;\n  }\n}\nfunction throwException(message, status, response, headers, result) {\n  if (result !== null && result !== undefined) throw result;else throw new ApiException(message, status, response, headers, null);\n}","map":{"version":3,"names":["ClientBase","Client","constructor","baseUrl","http","jsonParseReviver","undefined","window","getAll","version","url_","Error","replace","encodeURIComponent","options_","method","headers","Accept","transformOptions","then","transformedOptions_","fetch","_response","processGetAll","response","status","_headers","forEach","v","k","text","_responseText","result200","JSON","parse","result401","throwException","Promise","resolve","create","body","content_","stringify","processCreate","result201","update","processUpdate","get","id","processGet","delete","processDelete","ApiException","message","result","isApiException","obj"],"sources":["C:/Users/user/Web/notes.frontend/src/api/api.ts"],"sourcesContent":["import { ClientBase } from './client-base';\r\n\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n//----------------------\r\n// <auto-generated>\r\n//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\r\n// </auto-generated>\r\n//----------------------\r\n// ReSharper disable InconsistentNaming\r\n\r\nexport class Client extends ClientBase {\r\n    private http: {\r\n        fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;\r\n    };\r\n    private baseUrl: string;\r\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined =\r\n        undefined;\r\n\r\n    constructor(\r\n        baseUrl?: string,\r\n        http?: {\r\n            fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;\r\n        }\r\n    ) {\r\n        super();\r\n        this.http = http ? http : <any>window;\r\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    getAll(version: string): Promise<NoteListVm> {\r\n        let url_ = this.baseUrl + '/api/{version}/Note';\r\n        if (version === undefined || version === null)\r\n            throw new Error(\"The parameter 'version' must be defined.\");\r\n        url_ = url_.replace('{version}', encodeURIComponent('' + version));\r\n        url_ = url_.replace(/[?&]$/, '');\r\n\r\n        let options_ = <RequestInit>{\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n        };\r\n\r\n        return this.transformOptions(options_)\r\n            .then((transformedOptions_) => {\r\n                return this.http.fetch(url_, transformedOptions_);\r\n            })\r\n            .then((_response: Response) => {\r\n                return this.processGetAll(_response);\r\n            });\r\n    }\r\n\r\n    protected processGetAll(response: Response): Promise<NoteListVm> {\r\n        const status = response.status;\r\n        let _headers: any = {};\r\n        if (response.headers && response.headers.forEach) {\r\n            response.headers.forEach((v: any, k: any) => (_headers[k] = v));\r\n        }\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n                let result200: any = null;\r\n                result200 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <NoteListVm>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return result200;\r\n            });\r\n        } else if (status === 401) {\r\n            return response.text().then((_responseText) => {\r\n                let result401: any = null;\r\n                result401 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <ProblemDetails>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return throwException(\r\n                    'Unauthorized',\r\n                    status,\r\n                    _responseText,\r\n                    _headers,\r\n                    result401\r\n                );\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n                return throwException(\r\n                    'An unexpected server error occurred.',\r\n                    status,\r\n                    _responseText,\r\n                    _headers\r\n                );\r\n            });\r\n        }\r\n        return Promise.resolve<NoteListVm>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param body (optional)\r\n     * @return Success\r\n     */\r\n    create(version: string, body: CreateNoteDto | undefined): Promise<string> {\r\n        let url_ = this.baseUrl + '/api/{version}/Note';\r\n        if (version === undefined || version === null)\r\n            throw new Error(\"The parameter 'version' must be defined.\");\r\n        url_ = url_.replace('{version}', encodeURIComponent('' + version));\r\n        url_ = url_.replace(/[?&]$/, '');\r\n\r\n        const content_ = JSON.stringify(body);\r\n\r\n        let options_ = <RequestInit>{\r\n            body: content_,\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        };\r\n\r\n        return this.transformOptions(options_)\r\n            .then((transformedOptions_) => {\r\n                return this.http.fetch(url_, transformedOptions_);\r\n            })\r\n            .then((_response: Response) => {\r\n                return this.processCreate(_response);\r\n            });\r\n    }\r\n\r\n    protected processCreate(response: Response): Promise<string> {\r\n        const status = response.status;\r\n        let _headers: any = {};\r\n        if (response.headers && response.headers.forEach) {\r\n            response.headers.forEach((v: any, k: any) => (_headers[k] = v));\r\n        }\r\n        if (status === 201) {\r\n            return response.text().then((_responseText) => {\r\n                let result201: any = null;\r\n                result201 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <string>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return result201;\r\n            });\r\n        } else if (status === 401) {\r\n            return response.text().then((_responseText) => {\r\n                let result401: any = null;\r\n                result401 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <ProblemDetails>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return throwException(\r\n                    'Unauthorized',\r\n                    status,\r\n                    _responseText,\r\n                    _headers,\r\n                    result401\r\n                );\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n                return throwException(\r\n                    'An unexpected server error occurred.',\r\n                    status,\r\n                    _responseText,\r\n                    _headers\r\n                );\r\n            });\r\n        }\r\n        return Promise.resolve<string>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param body (optional)\r\n     * @return Success\r\n     */\r\n    update(version: string, body: UpdateNoteDto | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + '/api/{version}/Note';\r\n        if (version === undefined || version === null)\r\n            throw new Error(\"The parameter 'version' must be defined.\");\r\n        url_ = url_.replace('{version}', encodeURIComponent('' + version));\r\n        url_ = url_.replace(/[?&]$/, '');\r\n\r\n        const content_ = JSON.stringify(body);\r\n\r\n        let options_ = <RequestInit>{\r\n            body: content_,\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        };\r\n\r\n        return this.transformOptions(options_)\r\n            .then((transformedOptions_) => {\r\n                return this.http.fetch(url_, transformedOptions_);\r\n            })\r\n            .then((_response: Response) => {\r\n                return this.processUpdate(_response);\r\n            });\r\n    }\r\n\r\n    protected processUpdate(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {};\r\n        if (response.headers && response.headers.forEach) {\r\n            response.headers.forEach((v: any, k: any) => (_headers[k] = v));\r\n        }\r\n        if (status === 204) {\r\n            return response.text().then((_responseText) => {\r\n                return;\r\n            });\r\n        } else if (status === 401) {\r\n            return response.text().then((_responseText) => {\r\n                let result401: any = null;\r\n                result401 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <ProblemDetails>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return throwException(\r\n                    'Unauthorized',\r\n                    status,\r\n                    _responseText,\r\n                    _headers,\r\n                    result401\r\n                );\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n                return throwException(\r\n                    'An unexpected server error occurred.',\r\n                    status,\r\n                    _responseText,\r\n                    _headers\r\n                );\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    get(id: string, version: string): Promise<NoteDetailsVm> {\r\n        let url_ = this.baseUrl + '/api/{version}/Note/{id}';\r\n        if (id === undefined || id === null)\r\n            throw new Error(\"The parameter 'id' must be defined.\");\r\n        url_ = url_.replace('{id}', encodeURIComponent('' + id));\r\n        if (version === undefined || version === null)\r\n            throw new Error(\"The parameter 'version' must be defined.\");\r\n        url_ = url_.replace('{version}', encodeURIComponent('' + version));\r\n        url_ = url_.replace(/[?&]$/, '');\r\n\r\n        let options_ = <RequestInit>{\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n        };\r\n\r\n        return this.transformOptions(options_)\r\n            .then((transformedOptions_) => {\r\n                return this.http.fetch(url_, transformedOptions_);\r\n            })\r\n            .then((_response: Response) => {\r\n                return this.processGet(_response);\r\n            });\r\n    }\r\n\r\n    protected processGet(response: Response): Promise<NoteDetailsVm> {\r\n        const status = response.status;\r\n        let _headers: any = {};\r\n        if (response.headers && response.headers.forEach) {\r\n            response.headers.forEach((v: any, k: any) => (_headers[k] = v));\r\n        }\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n                let result200: any = null;\r\n                result200 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <NoteDetailsVm>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return result200;\r\n            });\r\n        } else if (status === 401) {\r\n            return response.text().then((_responseText) => {\r\n                let result401: any = null;\r\n                result401 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <ProblemDetails>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return throwException(\r\n                    'Unauthorized',\r\n                    status,\r\n                    _responseText,\r\n                    _headers,\r\n                    result401\r\n                );\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n                return throwException(\r\n                    'An unexpected server error occurred.',\r\n                    status,\r\n                    _responseText,\r\n                    _headers\r\n                );\r\n            });\r\n        }\r\n        return Promise.resolve<NoteDetailsVm>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    delete(id: string, version: string): Promise<void> {\r\n        let url_ = this.baseUrl + '/api/{version}/Note/{id}';\r\n        if (id === undefined || id === null)\r\n            throw new Error(\"The parameter 'id' must be defined.\");\r\n        url_ = url_.replace('{id}', encodeURIComponent('' + id));\r\n        if (version === undefined || version === null)\r\n            throw new Error(\"The parameter 'version' must be defined.\");\r\n        url_ = url_.replace('{version}', encodeURIComponent('' + version));\r\n        url_ = url_.replace(/[?&]$/, '');\r\n\r\n        let options_ = <RequestInit>{\r\n            method: 'DELETE',\r\n            headers: {},\r\n        };\r\n\r\n        return this.transformOptions(options_)\r\n            .then((transformedOptions_) => {\r\n                return this.http.fetch(url_, transformedOptions_);\r\n            })\r\n            .then((_response: Response) => {\r\n                return this.processDelete(_response);\r\n            });\r\n    }\r\n\r\n    protected processDelete(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {};\r\n        if (response.headers && response.headers.forEach) {\r\n            response.headers.forEach((v: any, k: any) => (_headers[k] = v));\r\n        }\r\n        if (status === 204) {\r\n            return response.text().then((_responseText) => {\r\n                return;\r\n            });\r\n        } else if (status === 401) {\r\n            return response.text().then((_responseText) => {\r\n                let result401: any = null;\r\n                result401 =\r\n                    _responseText === ''\r\n                        ? null\r\n                        : <ProblemDetails>(\r\n                              JSON.parse(_responseText, this.jsonParseReviver)\r\n                          );\r\n                return throwException(\r\n                    'Unauthorized',\r\n                    status,\r\n                    _responseText,\r\n                    _headers,\r\n                    result401\r\n                );\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n                return throwException(\r\n                    'An unexpected server error occurred.',\r\n                    status,\r\n                    _responseText,\r\n                    _headers\r\n                );\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n}\r\n\r\nexport interface CreateNoteDto {\r\n    title: string;\r\n    details?: string | undefined;\r\n}\r\n\r\nexport interface NoteDetailsVm {\r\n    id?: string;\r\n    title?: string | undefined;\r\n    details?: string | undefined;\r\n    creationDate?: Date;\r\n    editDate?: Date | undefined;\r\n}\r\n\r\nexport interface NoteListVm {\r\n    notes?: NoteLookupDto[] | undefined;\r\n}\r\n\r\nexport interface NoteLookupDto {\r\n    id?: string;\r\n    title?: string | undefined;\r\n}\r\n\r\nexport interface ProblemDetails {\r\n    type?: string | undefined;\r\n    title?: string | undefined;\r\n    status?: number | undefined;\r\n    detail?: string | undefined;\r\n    instance?: string | undefined;\r\n}\r\n\r\nexport interface UpdateNoteDto {\r\n    id?: string;\r\n    title?: string | undefined;\r\n    details?: string | undefined;\r\n}\r\n\r\nexport class ApiException extends Error {\r\n    message: string;\r\n    status: number;\r\n    response: string;\r\n    headers: { [key: string]: any };\r\n    result: any;\r\n\r\n    constructor(\r\n        message: string,\r\n        status: number,\r\n        response: string,\r\n        headers: { [key: string]: any },\r\n        result: any\r\n    ) {\r\n        super();\r\n\r\n        this.message = message;\r\n        this.status = status;\r\n        this.response = response;\r\n        this.headers = headers;\r\n        this.result = result;\r\n    }\r\n\r\n    protected isApiException = true;\r\n\r\n    static isApiException(obj: any): obj is ApiException {\r\n        return obj.isApiException === true;\r\n    }\r\n}\r\n\r\nfunction throwException(\r\n    message: string,\r\n    status: number,\r\n    response: string,\r\n    headers: { [key: string]: any },\r\n    result?: any\r\n): any {\r\n    if (result !== null && result !== undefined) throw result;\r\n    else throw new ApiException(message, status, response, headers, null);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}